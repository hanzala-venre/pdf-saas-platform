generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  subscription  String    @default("free")
  stripeCustomerId String?
  stripeSubscriptionId String?
  subscriptionStatus String @default("free")
  subscriptionPlan String @default("free")
  subscriptionCurrentPeriodEnd DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  pdfOperations PdfOperation[]
  usageStats    UsageStats[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model PdfOperation {
  id          String        @id @default(cuid())
  userId      String
  type        OperationType
  fileName    String
  fileSize    Int
  status      Status        @default(PROCESSING)
  resultUrl   String?
  errorMessage String?
  processingTime Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pdf_operations")
}

model UsageStats {
  id          String   @id @default(cuid())
  userId      String
  month       Int
  year        Int
  operationsCount Int @default(0)
  totalFileSize   BigInt @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month, year])
  @@map("usage_stats")
}

enum Role {
  USER
  ADMIN
}

enum OperationType {
  MERGE
  SPLIT
  COMPRESS
  REACT_EDIT
  IMAGE_TO_PDF
  PDF_TO_IMAGE
}

enum Status {
  PROCESSING
  COMPLETED
  FAILED
}
